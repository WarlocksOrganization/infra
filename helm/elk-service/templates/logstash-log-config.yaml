apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configMap.logging.name }}
  labels:
    task: logging
    k8s-app: logstash
data:
  logging.conf: |
    input {
      kafka {
        bootstrap_servers => "kraft-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
        topics => ["logging"]
        consumer_threads => 1
        decorate_events => true
      }
    }

    filter {
      json {
        source => "message"
        target => "parsed"
        remove_field => ["message"]
      }

      mutate {
        copy => {
          "[parsed][eventType]"    => "eventType"
          "[parsed][createdAt]"    => "createdAt"
          "[parsed][patchVersion]" => "patchVersion"
          "[parsed][gameId]"       => "gameId"
          "[parsed][mapId]"        => "mapId"
          "[parsed][playerCount]"  => "playerCount"
        }
      }

      if [parsed][eventType] == "gameEnd" {
        split {
          field => "[parsed][playerLogs]"
          target => "playerLog"
        }

        ruby {
          code => '
            require "logstash/timestamp"

            rounds = ["round1", "round2", "round3"]
            player = event.get("playerLog")
            scores = player["roundScore"]
            ranks  = player["roundRank"]
            sets   = [player["round1Set"], player["round2Set"], player["round3Set"]]

            if scores && ranks && sets
              rounds.each_with_index do |round, i|
                new_event = event.clone
                new_event.set("eventType", "classDataV2")
                new_event.set("round", round)
                new_event.set("score", scores[i])
                new_event.set("rank", ranks[i])
                new_event.set("class", player["classCode"])
                new_event.set("userId", player["userId"])
                new_event.set("cardSet", sets[i])
                new_event.remove("playerLog")
                new_event.remove("parsed")
                new_event.set("@timestamp", LogStash::Timestamp.new(Time.now.utc))
                event.cancel
                new_event
              end
            end
          '
        }
      }
    }

    output {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        user => "${ELASTIC_USERNAME}"
        password => "${ELASTIC_PASSWORD}"
        index => "logs-order-%{+YYYY.MM.dd}"
        action => "create"
      }
    }