apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configMap.logging.name }}
  labels:
    task: logging
    k8s-app: logstash
data:
  logging.conf: |
    input {
      kafka {
        bootstrap_servers => "kraft-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
        topics => ["logging"]
        consumer_threads => 1
        decorate_events => true
      }
    }
    filter {
          json {
            source => "message"
            target => "parsed"
            remove_field => ["message"]
        }

          mutate {
          add_field => {
          "eventType"   => "%{[parsed][eventType]}"
          "createdAt"   => "%{[parsed][createdAt]}"
          "patchVersion" => "%{[parsed][patchVersion]}"
          "gameId"      => "%{[parsed][gameId]}"
          "mapId"       => "%{[parsed][mapId]}"
          "playerCount" => "%{[parsed][playerCount]}"
          }
        }

          if [parsed][eventType] == "gameEnd" {

          split {
          field => "[parsed][playerLogs]"
          target => "playerLog"
          }

          ruby {
          code => '
          player = event.get("playerLog")
          rounds = ["round1", "round2", "round3"]
          scores = player["roundScore"]
          ranks = player["roundRank"]
          sets = [player["round1Set"], player["round2Set"], player["round3Set"]]

          rounds.each_with_index do |round, i|
          event.clone.tap do |e|
          e.set("eventType", "classDataV2")
          e.set("round", round)
          e.set("score", scores[i])
          e.set("rank", ranks[i])
          e.set("class", player["classCode"])
          e.set("userId", player["userId"])
          e.set("cardSet", sets[i])
          e.remove("playerLog")
          e.remove("parsed")
          e.remove("message")
          e.remove("tags")
          e.remove("@version")
          e.remove("host")
          e.remove("agent")
          e.remove("ecs")
          e.remove("input")
          e.remove("log")
          e.remove("data_stream")
          e.remove("type")
          e.set("@timestamp", Time.now.utc.iso8601)
          e.cancel
          end
          end
          '
          }
        }
      }


    output {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        user => "${ELASTIC_USERNAME}"
        password => "${ELASTIC_PASSWORD}"
        index => "logs-order-%{+YYYY.MM.dd}"
        action => "create"
      }
    }