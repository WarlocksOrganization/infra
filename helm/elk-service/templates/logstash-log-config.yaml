apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configMap.logging.name }}
  labels:
    task: logging
    k8s-app: logstash
data:
  logging.conf: |
    input {
      kafka {
        bootstrap_servers => "kraft-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
        topics => ["logging"]
        consumer_threads => 1
        decorate_events => true
      }
    }

    filter {
      clone {
        clones => ["raw_log"]
      }
      if [type] == "raw_log" {
        mutate {
          add_tag => ["raw_log"]
        }
      }
      if "row_log" in [tags] {
        filter {
          json {
            source => "message"
          }

          mutate {
            rename => { "timestamp" => "log_timestamp" }
          }

          date {
            match => ["log_timestamp", "ISO8601"]
            target => "@timestamp"
            remove_field => ["log_timestamp"]
          }
        }
      }

      if "raw_log" not in [tags] {
        json {
          source => "message"
          target => "parsed"
          remove_field => ["message"]
        }

        mutate {
          copy => {
            "[parsed][eventType]"    => "eventType"
            "[parsed][createdAt]"    => "createdAt"
            "[parsed][patchVersion]" => "patchVersion"
            "[parsed][gameId]"       => "gameId"
            "[parsed][mapId]"        => "mapId"
            "[parsed][playerCount]"  => "playerCount"
          }
          convert => {
            "mapId"       => "integer"
            "gameId"      => "integer"
            "playerCount" => "integer"
          }
        }

        if [parsed][eventType] == "gameEnd" {
          split {
            field => "[parsed][playerLogs]"
            target => "playerLog"
          }

          ruby {
            code => '
              require "logstash/timestamp"
              player = event.get("playerLog")
              rounds = ["round1", "round2", "round3"]
              scores = player["roundScore"]
              ranks  = player["roundRank"]
              sets   = [player["round1Set"], player["round2Set"], player["round3Set"]]

              if scores && ranks && sets
                round_docs = []
                rounds.each_with_index do |round, i|
                  round_docs << {
                    "eventType" => "classDataV2",
                    "round" => round,
                    "score" => scores[i],
                    "rank"  => ranks[i].to_s,
                    "class" => player["classCode"].to_s,
                    "userId" => player["userId"].to_s,
                    "cardSet" => sets[i],
                    "@timestamp" => LogStash::Timestamp.new(Time.now.utc)
                  }
                end
                event.set("roundDocs", round_docs)
              end
            '
          }

          split {
            field => "roundDocs"
          }

          mutate {
            rename => { "[roundDocs][score]" => "score" }
            rename => { "[roundDocs][rank]" => "rank" }
            rename => { "[roundDocs][round]" => "round" }
            rename => { "[roundDocs][class]" => "class" }
            rename => { "[roundDocs][userId]" => "userId" }
            rename => { "[roundDocs][cardSet]" => "cardSet" }
            rename => { "[roundDocs][eventType]" => "eventType" }
          }
        }
      }
    }

    output {
      if "raw_log" in [tags] {
        elasticsearch {
          hosts => ["elasticsearch:9200"]
          user => "${ELASTIC_USERNAME}"
          password => "${ELASTIC_PASSWORD}"
          index => "logs-raw-%{+YYYY.MM.dd}"
          action => "create"
        }
      } else {
        elasticsearch {
          hosts => ["elasticsearch:9200"]
          user => "${ELASTIC_USERNAME}"
          password => "${ELASTIC_PASSWORD}"
          index => "logs-classdata-%{+YYYY.MM.dd}"
          action => "create"
        }
      }
    }